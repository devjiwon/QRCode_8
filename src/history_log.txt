  350  cd qrcode_team8
  351  ls
  352  PS1='[`d==`t]``$'
  353  ds
  354  cd desktop
  355  ls
  356  git clone https://github.com/devjiwon/QRcode_team8.git
  357  ls
  358  PS1='[\d==\t]\\$'
  359  git clone https://github.com/devjiwon/QRcode_team8.git
  360  ls
  361  cd qrcode_team8
  362  ls -al
  363  PS1='[\d==\t]\\$'
  364  ls
  365  cd desktop
  366  ls
  367  cd qrcode_8
  368  git clone https://github.com/ricmoo/QRCode.git
  369  cd qrcode_8
  370  git init
  371  git status
  372  git add .
  373  git commit -m "init"
  374  git remote add origin https://github.com/devjiwon/QRCode_8.git
  375  git push -u origin master
  376  ls
  377  pwd
  378  git branch
  379  git branch jiwon
  380  git branch
  381  git checkout jiwon
  382  git branch
  383  git checkout -b jiwon1
  384  git branch
  385  git checkout jiwon
  386  git branch -d jiwon1
  387  git branch
  388  git status
  389  git status
  390  git add .
  391  git status
  392  git commit "jiwon"
  393  git commit -m "jiwon"
  394  git status
  395  ls
  396  cd src
  397  ls
  398  vi jiTest.c
  399  ls
  400  git status
  401  git add jiTest.c
  402  git commit -m "ji git rm"
  403  git status
  404  git rm jiTest.c
  405  git status
  406  git commit -m "deleted file"
  407  git status
  408  git status -s
  409  git branch
  410  git push origin jiwon
  411  ls
  412  vi ji.c
  413  git status -s
  414  git add ji.c
  415  git status -s
  416  git commit -m "status -s"
  417  git status -s
  418  git rm ji.c
  419  git status -s
  420  git commit --amend
  421  git log
  422  git status
  423  ls
  424  vi ji.c
  425  git status
  426  git add ji.c
  427  git status
  428  git commit -m "git commit --amend"
  429  git status
  430  git commit --amend
  431  git log -1
  432  git status
  433  git rm ji.c
  434  git status
  435  git commit -m "git practice"
  436  git push origin jiwon
  437  ls
  438  cd ..
  439  ls
  440  vi practice.txt
  441  rm practice.txt
  442  git status
  443  vi README.md
  444  git status
  445  git commit -m "modify readme.md"
  446  git add README.md
  447  ls
  448  vi practice.txt
  449  git status
  450  git diff
  451  git diff
  452  git commit -m "for diff"
  453  vi README.md
  454  git add README.md
  455  vi practice.txt
  456  git diff
  457  git status
  458  git diff --staged
  459  git diff HEAD
  460  git status
  461  git log
  462  git log -p -2
  463  git log --stat
  464  git log -g
  465  git status
  466  ls
  467  rm practice.txt
  468  ls
  469  git status
  470  vi README.md
  471  git status
  472  git README.md
  473  git add README.md
  474  git status
  475  git commit -m "for git 3"
  476  git push origin jiwon
  477  git remote
  478  git remote -v
  479  git remote show origin
  480  git remote rename origin mime
  481  git remote
  482  git remote rm mine
  483  git remote
  484  git remote rm mine
  485  git remote rm mime
  486  git remote
  487  git remote rename orgin master
  488  git remote origin
  489  git remote
  490  git remote -v
  491  git remote add origin https://github.com/devjiwon/QRCode_8.git
  492  git remote
  493  git status
  494   | tee jiwon
  495  | tee jiwon
  496  tee jiwon.txt
  497  ls
  498  cd desktop
  499  git pull 
  500  #pragma mark - Public QRCode functions
  501  uint16_t qrcode_getBufferSize(uint8_t version);
  502  int8_t qrcode_initText(QRCode *qrcode, uint8_t *modules, uint8_t version, uint8_t ecc, const char *data);
  503  bool qrcode_getModule(QRCode *qrcode, uint8_t x, uint8_t y);
  504  uint16_t qrcode_getBufferSize(uint8_t version) {
  505      return bb_getGridSizeBytes(4 * version + 17);
  506  }
  507  // @TODO: Return error if data is too big.
  508  int8_t qrcode_initBytes(QRCode *qrcode, uint8_t *modules, uint8_t version, uint8_t ecc, uint8_t *data, uint16_t length) {
  509      uint8_t size = version * 4 + 17;
  510      qrcode->version = version;
  511      qrcode->size = size;
  512      qrcode->ecc = ecc;
  513      qrcode->modules = modules;
  514      
  515      uint8_t eccFormatBits = (ECC_FORMAT_BITS >> (2 * ecc)) & 0x03;
  516      
  517  #if LOCK_VERSION == 0
  518      uint16_t moduleCount = NUM_RAW_DATA_MODULES[version - 1];
  519      uint16_t dataCapacity = moduleCount / 8 - NUM_ERROR_CORRECTION_CODEWORDS[eccFormatBits][version - 1];
  520  #else
  521      version = LOCK_VERSION;
  522      uint16_t moduleCount = NUM_RAW_DATA_MODULES;
  523      uint16_t dataCapacity = moduleCount / 8 - NUM_ERROR_CORRECTION_CODEWORDS[eccFormatBits];
  524  #endif
  525      
  526      struct BitBucket codewords;
  527      uint8_t codewordBytes[bb_getBufferSizeBytes(moduleCount)];
  528      bb_initBuffer(&codewords, codewordBytes, (int32_t)sizeof(codewordBytes));
  529      
  530      // Place the data code words into the buffer
  531      int8_t mode = encodeDataCodewords(&codewords, data, length, version);
  532      
  533      if (mode < 0) { return -1; }
  534      qrcode->mode = mode;
  535      
  536      // Add terminator and pad up to a byte if applicable
  537      uint32_t padding = (dataCapacity * 8) - codewords.bitOffsetOrWidth;
  538      if (padding > 4) { padding = 4; }
  539      bb_appendBits(&codewords, 0, padding);
  540      bb_appendBits(&codewords, 0, (8 - codewords.bitOffsetOrWidth % 8) % 8);
  541      // Pad with alternate bytes until data capacity is reached
  542      for (uint8_t padByte = 0xEC; codewords.bitOffsetOrWidth < (dataCapacity * 8); padByte ^= 0xEC ^ 0x11) {
  543          bb_appendBits(&codewords, padByte, 8);
  544      }
  545      BitBucket modulesGrid;
  546      bb_initGrid(&modulesGrid, modules, size);
  547      
  548      BitBucket isFuncGrid; // isFunctionGrid -> isFuncGrid
  549      uint8_t isFuncGridBytes[bb_getGridSizeBytes(size)]; // isFunctionGridBytes -> isFuncGridBytes
  550      bb_initGrid(&isFuncGrid, isFuncGridBytes, size);
  551      
  552      // Draw function patterns, draw all codewords, do masking
  553      drawFunctionPatterns(&modulesGrid, &isFuncGrid, version, eccFormatBits);
  554      performErrorCorrection(version, eccFormatBits, &codewords);
  555      drawCodewords(&modulesGrid, &isFuncGrid, &codewords);
  556      
  557      // Find the best (lowest penalty) mask
  558      uint8_t mask = 0;
  559      int32_t minPenalty = INT32_MAX;
  560      for (uint8_t i = 0; i < 8; i++) {
  561          drawFormatBits(&modulesGrid, &isFuncGrid, eccFormatBits, i);
  562          applyMask(&modulesGrid, &isFuncGrid, i);
  563          int penalty = getPenaltyScore(&modulesGrid);
  564          if (penalty < minPenalty) {
  565              mask = i;
  566              minPenalty = penalty;
  567          }
  568          applyMask(&modulesGrid, &isFuncGrid, i);  // Undoes the mask due to XOR
  569      }
  570      
  571      qrcode->mask = mask;
  572      
  573      // Overwrite old format bits
  574      drawFormatBits(&modulesGrid, &isFuncGrid, eccFormatBits, mask);
  575      
  576      // Apply the final choice of mask
  577      applyMask(&modulesGrid, &isFuncGrid, mask);
  578      return 0;
  579  }
  580  int8_t qrcode_initText(QRCode *qrcode, uint8_t *modules, uint8_t version, uint8_t ecc, const char *data) {
  581      return qrcode_initBytes(qrcode, modules, version, ecc, (uint8_t*)data, strlen(data));
  582  }
  583  bool qrcode_getModule(QRCode *qrcode, uint8_t x, uint8_t y) {
  584      if (x < 0 || x >= qrcode->size || y < 0 || y >= qrcode->size) {
  585          return false;
  586      }
  587      uint32_t offset = y * qrcode->size + x;
  588      boolean result = (qrcode->modules[offset >> 3] & (1 << (7 - (offset & 0x07)))) != 0;
  589      return result;
  590  }
  591  /*
  592  uint8_t qrcode_getHexLength(QRCode *qrcode) {
  593      return ((qrcode->size * qrcode->size) + 7) / 4;
  594  }
  595  void qrcode_getHex(QRCode *qrcode, char *result) {
  596      
  597  }
  598  git pull https://github.com/devjiwon/QRCode_8.git
  599  ls
  600  git clone https://github.com/devjiwon/QRCode_8.git
  601  cd qrcode_8
  602  ls
  603  cd src
  604  ls
  605  cd ..
  606  git branch
  607  ls
  608  cd ..
  609  ls
  610  cd qrcode_8
  611  ls
  612  git branch
  613  cd ..
  614  ls
  615  ls -a
  616  mkdir ji
  617  cd ji
  618  git clone https://github.com/devjiwon/QRCode_8.git
  619  git init
  620  git remote add origin https://github.com/devjiwon/QRCode_8.git
  621  ls
  622  cd Qrcode_8
  623  ls
  624  git init
  625  ls
  626  git remote add origin https://github.com/devjiwon/QRCode_8.git
  627  cd src
  628  ls
  629  cd ..
  630  git branch
  631  git init
  632  git remoet add origin https://github.com/devjiwon/QRCode_8.git
  633  git status
  634  git pull
  635  cd src
  636  cd ..
  637  ls
  638  git branch ji
  639  ls
  640  cd src
  641  ls
  642  vi ji.txt
  643  cd ..
  644  ls
  645  git add .
  646  ls
  647  git status
  648  git commit -m "ji"
  649  ls
  650  git status
  651  git branch
  652  git push origin ji
  653  ls
  654  cd src
  655  ls
  656  rm ji.txt
  657  ls
  658  cd ..
  659  ls
  660  git status
  661  git add .
  662  git commit -m "test bye"
  663  git push origin ji
  664  git branchj
  665  git branch
  666  git pull
  667  git status
  668  git add .
  669  git status
  670  git commit -m "code revise"
  671  git push origin ji
  672  git config --global --edit
  673  git config --global --edit
  674  git commit --amend --reset-author
  675  git push origin ji
  676  mrdir
  677  ls
  678  cd ..
  679  ls
  680  cd ..
  681  cd ..
  682  ls
  683  cd desktop
  684  ls
  685  git clone https://github.com/devjiwon/QRCode_8.git
  686  ls
  687  cd qrcode_8
  688  ls
  689  git branch
  690  git branch tag
  691  git branch
  692  git checkout
  693  git checkout tag
  694  git branch
  695  PS1='[\d==\t]\\$'
  696  git status
  697  git status
  698  git add .
  699  git commit -m "qrcode.c public jiwon"
  700  git config --global user.name "jiwon"
  701  git config --global user.email "wldnjs5818@naver.com"
  702  git status
  703  git push origin tag
  704  git branch
  705  git push origin master
  706  git branch jitag
  707  git push origin jitag
  708  git status
  709  git add .
  710  git commit -m "public QRcode func"
  711  git push origin jitag
  712  git status
  713  git remote
  714  git push
  715  git push origin jitag
  716  git branch
  717  git checkout jitag
  718  git status
  719  git status
  720  git add. 
  721  git add .
  722  git status
  723  git commit -m "public qrcode func"
  724  git push origin jitag
  725  git merge mastet
  726  git merge master
  727  git branch
  728  git master
  729  git branch master
  730  git checkout master
  731  git merge jitag
  732  git status
  733  git push
  734  git push origin jitag
  735  git push origin master
  736  git push
  737  git status
  738  git checkout jitag
  739  git status
  740  git push origin jitag
  741  git push
  742  git push origin master
  743  git checkout master
  744  git push
  745  git log --graph | tee ji.txt
  746  git status
  747  rm ji.txt
  748  git status
  749  git branch
  750  git jitag
  751  git branch jitag
  752  git checkout jitag
  753  ls
  754  cd src
  755  ls
  756  cd qrcode,c
  757  vi qrcode.c
  758  git status
  759  git add .
  760  git status
  761  git commit -m "qr func revise"
  762  git push origin jitag
  763  git branch
  764  git checkout master
  765  git merge jitag
  766  git merge master jitag
  767  git status
  768  git push origin master
  769  git checkout
  770  git checkout jitag
  771  git tag -a v1.0 -m "my version 1.0"
  772  git show v1.0
  773  git status
  774  ls
  775  cd qrcode.c
  776  vi qrcode.c
  777  git show v1.0
  778  git tag
  779  git tag v1.0.1-1w
  780  git tag
  781  git show v1.0.1-1w
  782  git push origin v1.0
  783  git checkout -b version2 v2.0.0
  784  git status
  785  ls
  786  vi headTest.txt
  787  git status
  788  git branch
  789  git add .
  790  git status
  791  git checkout HEAD --headTest.txt
  792  git checkout HEAD -- headTest.txt
  793  git status
  794  git add .
  795  git status
  796  git checkout HEAD -- headTest.txt
  797  rm headTest.txt
  798  git status
  799  ls
  800  vi qrcode.c
  801  git status
  802  git add .
  803  git status
  804  git checkout HEAD -- qrcode.c
  805  git status
  806  ls
  807  vi qrcode.c
  808  git log -1 HEAD~1^^
  809  git log -3 HEAD^^^
  810  git branch
  811  ls
  812  vi resetTest.txt
  813  ls
  814  git status
  815  git add .
  816  git status
  817  git commit - m "resetTest"
  818  git commit -m "resetTest"
  819  git status
  820  vi resetTest.txt
  821  git status
  822  git add .
  823  git status
  824  git commit -m "resetTest2"
  825  git status
  826  vi resetTest.txt
  827  git add .
  828  git status
  829  git commit -m "resetTest3"
  830  git reset --soft HEAD~
  831  git status
  832  index update
  833  git reset HEAD~
  834  git reset --mixed HEAD~
  835  git reset --hard HEAD~
  836  git status
  837  rm resetTest.txt
  838  git status
  839  git push origin jitag
  840  git pull
  841  git pull remote jitag
  842  git remote
  843  git pull origin jitag
  844  git status
  845  git push origin jitag
  846  ls
  847  git log -4
  848  git log --graph | tee tag.txt
  849  history > history_log.txt
